# This is a basic workflow to help you get started with Actions

name: Flutter CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    container:
      image: bradyt/dart-task:flutter-stable

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v1

    # toc: https://taskwarrior.org/docs/taskserver/setup.html
    - run: dart pub global activate --source git https://github.com/bradyt/taskd-setup-dart.git
    - run: |
        export "PATH=$HOME/.pub-cache/bin:$PATH"
        taskd-setup --TASKDDATA '/var/taskd'
      working-directory: fixture

    - run: |
        export "PATH=$HOME/.pub-cache/bin:$PATH"
        TASKDDATA='/var/taskd' taskdctl start

    # Get flutter dependencies.
    - run: flutter pub get

    # Check for any formatting issues in the code.
    - run: flutter format --set-exit-if-changed .

    # Statically analyze the Dart code for any errors.
    - run: flutter analyze .

    # Run widget tests for our flutter project.
    - run: flutter test

    # Check that taskwarrior can handle data
    - run: HOME=fixture task sync
    - run: HOME=fixture task 1 done
